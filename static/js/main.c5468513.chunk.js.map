{"version":3,"sources":["components/DSU.js","components/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["UnionFind","elements","this","count","length","parent","forEach","e","a","b","rootA","find","rootB","union","Grid","initialRows","initialCols","isMakingMaze","useState","table","setTable","rerender","setRerender","tableHtml","useRef","useEffect","makeTable","kruskal","edges","nodes","i","j","push","uf","set","Set","map","add","size","edgeIndex","Array","from","currentEdge","Math","floor","random","delete","connected","i1","j1","i2","j2","console","log","current","children","item","classList","row","ref","defaultProps","App","rows","setRows","cols","setCols","setIsMakingMaze","className","type","onChange","currentTarget","value","placeholder","onClick","disabled","window","location","reload","Number","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5468513.chunk.js","sourcesContent":["// Source: https://www.tutorialspoint.com/Kruskal-s-algorithm-in-Javascript\n\nclass UnionFind {\n  constructor(elements) {\n     // Number of disconnected components\n     this.count = elements.length;\n\n     // Keep Track of connected components\n     this.parent = {};\n\n     // Initialize the data structure such that all\n     // elements have themselves as parents\n     elements.forEach(e => (this.parent[e] = e));\n  }\n\n  union(a, b) {\n     let rootA = this.find(a);\n     let rootB = this.find(b);\n\n     // Roots are same so these are already connected.\n     if (rootA === rootB) return;\n\n     // Always make the element with smaller root the parent.\n     if (rootA < rootB) {\n        if (this.parent[b] !== b) this.union(this.parent[b], a);\n        this.parent[b] = this.parent[a];\n     } else {\n        if (this.parent[a] !== a) this.union(this.parent[a], b);\n        this.parent[a] = this.parent[b];\n     }\n  }\n\n  // Returns final parent of a node\n  find(a) {\n     while (this.parent[a] !== a) {\n        a = this.parent[a];\n     }\n     return a;\n  }\n\n  // Checks connectivity of the 2 nodes\n  connected(a, b) {\n     return this.find(a) === this.find(b);\n  }\n}\n\nexport default UnionFind\n","import propTypes from 'prop-types'\nimport { useEffect, useRef, useState } from 'react'\nimport UnionFind from './DSU'\n\nconst Grid = ({ initialRows, initialCols, isMakingMaze }) => {\n\n  // States\n  const [table, setTable] = useState([])\n  const [rerender, setRerender] = useState(false)\n  const tableHtml = useRef(null)\n\n  // Makes the grid\n  useEffect(() => {\n    makeTable()\n\n  }, [initialRows, initialCols])\n\n  // Runs Kruskal algorithm\n  useEffect(() => {\n    if (isMakingMaze) kruskal()\n  }, [isMakingMaze])\n\n\n  const kruskal = () => {\n    setRerender(false)\n\n    let edges = []\n    let nodes = []\n\n    for (let i = 0; i < initialRows; i++) {\n      for (let j = 0; j < initialCols; j++) {\n        nodes.push([i, j])\n        if (j + 1 < initialCols) edges.push([[i, j], [i, j + 1]]);\n        if (i + 1 < initialRows) edges.push([[i, j], [i + 1, j]]);\n      }\n    }\n\n    let uf = new UnionFind(nodes);\n\n    let set = new Set()\n\n    edges.map(e => set.add(e))\n\n    while (set.size > 0) {\n      let edgeIndex = Array.from(set)\n      let currentEdge = edgeIndex[Math.floor(Math.random() * edgeIndex.length)]\n      set.delete(currentEdge)\n\n      if (uf.connected(currentEdge[0], currentEdge[1])) continue\n\n      uf.union(currentEdge[0], currentEdge[1])\n\n      let i1 = currentEdge[0][0]\n      let j1 = currentEdge[0][1]\n      let i2 = currentEdge[1][0]\n      let j2 = currentEdge[1][1]\n\n      console.log(i1, j1, i2, j2);\n      if (i1 === i2) {\n        tableHtml.current.children.item(i1).children.item(j1).classList.add(\"right\")\n        tableHtml.current.children.item(i2).children.item(j2).classList.add(\"left\")\n      } else {\n        tableHtml.current.children.item(i1).children.item(j1).classList.add(\"down\")\n        tableHtml.current.children.item(i2).children.item(j2).classList.add(\"top\")\n      }\n\n\n    }\n    setRerender(true)\n  }\n\n  const makeTable = () => {\n\n    let table = []\n\n    for (let i = 0; i < initialRows; i++) {\n      let row = []\n      for (let j = 0; j < initialCols; j++) {\n        row.push(\n          (<td key={j} ></td>)\n        )\n      }\n\n      table.push(\n        <tr key={i}>{row}</tr>\n      )\n    }\n\n    setTable(table);\n  }\n\n  return (\n    <>\n      <h4>{rerender ? \"Generated! Click on reset to generate again\": \"Select Maze size and click on 'Make Maze!' button to generate a maze\"}</h4>\n      <table>\n        <tbody ref={tableHtml}>\n          {table.length ? table.map(e => e) : null}\n        </tbody>\n      </table>\n    </>\n  )\n}\n\nGrid.propTypes = {\n  initialRows: propTypes.number,\n  initialCols: propTypes.number,\n}\n\nGrid.defaultProps = {\n  initialCols: 3,\n  initialRows: 3\n}\n\nexport default Grid\n","import './App.css';\nimport { useState } from 'react';\nimport Grid from './components/Grid';\n\nfunction App() {\n  // States\n  const [rows, setRows] = useState(3);\n  const [cols, setCols] = useState(3);\n  const [isMakingMaze, setIsMakingMaze] = useState(false)\n  \n  return (\n    <div className=\"App\">\n      <h1>Maze Generator</h1>\n      <input type=\"text\" onChange={(e) => {setRows(e.currentTarget.value)}} placeholder=\"Rows\" />\n      <input type=\"text\" onChange={(e) => {setCols(e.currentTarget.value)}} placeholder=\"Cols\" />\n\n      <button onClick={(e) => setIsMakingMaze(true)} disabled={isMakingMaze}>Make Maze!</button>\n      <button onClick={(e) => window.location.reload()} >Reset</button>\n     \n     <Grid initialCols={Number(cols)} initialRows={Number(rows)} isMakingMaze={isMakingMaze}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}